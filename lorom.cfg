# ca65 linker config for 256 KiB (2 Mbit) sfc file

# Physical areas of memory
MEMORY {
  ZEROPAGE:   start =  $000000, size = $100;

  # Make sure to change BSS based on where you put
  # the stack and how big you expect it to get.
  # Unlike on the NES, we include shadow OAM in BSS here
  # because there's not as much of a benefit to having it
  # page-aligned.
  BSS:        start =  $000200, size = $1E00, define = yes;
  BSS7E:      start =  $7E2000, size = $E000;
  BSS7F:      start =  $7F0000, size =$10000;

  # The fast ROM area starts at $808000.
  # It's mirrored into the slow ROM area.
  ROM0:       start =  $808000, size = $8000, fill = yes;
  ROM1:       start =  $818000, size = $8000, fill = yes;
  ROM2:       start =  $828000, size = $8000, fill = yes;
  ROM3:       start =  $838000, size = $8000, fill = yes;
  ROM4:       start =  $848000, size = $8000, fill = yes;
  ROM5:       start =  $858000, size = $8000, fill = yes;
  ROM6:       start =  $868000, size = $8000, fill = yes;
  ROM7:       start =  $878000, size = $8000, fill = yes;
  ROM8:       start =  $888000, size = $8000, fill = yes;
  ROM9:       start =  $898000, size = $8000, fill = yes;
  ROMA:       start =  $8A8000, size = $8000, fill = yes;
  ROMB:       start =  $8B8000, size = $8000, fill = yes;
  ROMC:       start =  $8C8000, size = $8000, fill = yes;
  ROMD:       start =  $8D8000, size = $8000, fill = yes;
  ROME:       start =  $8E8000, size = $8000, fill = yes;
  ROMF:       start =  $8F8000, size = $8000, fill = yes;
  ROMG:       start =  $908000, size = $8000, fill = yes;
  ROMH:       start =  $918000, size = $8000, fill = yes;
  ROMI:       start =  $928000, size = $8000, fill = yes;
  ROMJ:       start =  $938000, size = $8000, fill = yes;
  ROMK:       start =  $948000, size = $8000, fill = yes;
  ROML:       start =  $958000, size = $8000, fill = yes;
}

# Logical areas code/data can be put into.
SEGMENTS {
  # Read-only areas for main CPU
  CODE:       load = ROM0, run = BSS, define = yes;
  BOOTCODE:   load = ROM0;
  RODATA:     load = ROM3;
  SNESHEADER: load = ROM0, start = $80FFC0;
  CODE1:      load = ROM1, optional=yes;
  RODATA1:    load = ROM1, optional=yes;
  CODE2:      load = ROM2, optional=yes;
  RODATA2:    load = ROM2, optional=yes;
  CODE3:      load = ROM4, optional=yes;
  RODATA3:    load = ROM4, optional=yes;
  CODE4:      load = ROM5, optional=yes;
  RODATA4:    load = ROM5, optional=yes;
  CODE5:      load = ROM6, optional=yes;
  RODATA5:    load = ROM6, optional=yes;
  CODE6:      load = ROM7, optional=yes;
  RODATA6:    load = ROM7, optional=yes;
  CODE7:      load = ROM8, optional=yes;
  RODATA7:    load = ROM8, optional=yes;
  CODE8:      load = ROMG, optional=yes;
  RODATA8:    load = ROMG, optional=yes;
  CODE9:      load = ROMH, optional=yes;
  RODATA9:    load = ROMH, optional=yes;
  CODEA:      load = ROMK, optional=yes;
  RODATAA:    load = ROMK, optional=yes;
  MUSICDATA:  load = ROML, optional=yes;
  
  CHR0:       load = ROM9, optional=yes;
  CHR1:       load = ROMA, optional=yes;
  CHR2:       load = ROMB, optional=yes;
  CHR3:       load = ROMC, optional=yes;
  CHR4:       load = ROMD, optional=yes;
  CHR5:       load = ROME, optional=yes;
  CHR6:       load = ROMF, optional=yes;
  CHR7:		  load = ROMI, optional=yes;
  CHR8:		  load = ROMJ, optional=yes;

  # Areas for variables for main CPU
  ZEROPAGE:   load = ZEROPAGE, type = zp, define=yes;
  BSS:        load = BSS, type = bss, optional=yes;
  BSS7E:      load = BSS7E, type = bss, optional=yes;
  BSS7F:      load = BSS7F, type = bss, optional=yes;
  SRAM:       load = BSS, type = bss, optional=yes, define=yes;
}
