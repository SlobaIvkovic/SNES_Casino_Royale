Passing around oam_off is a big inefficient, and it's not required by all games.
This patch passes it implicitly instead.

diff --git a/snes/cc65-template/neslib.h b/snes/cc65-template/neslib.h
index 6afbc3e..7600838 100644
--- a/snes/cc65-template/neslib.h
+++ b/snes/cc65-template/neslib.h
@@ -58,17 +58,15 @@ void __fastcall__ oam_big(unsigned char sprid);
 // set sprite in OAM buffer, chrnum is tile, attr is attribute, sprid is offset in OAM in bytes
 // returns sprid+4, which is offset for a next sprite
 // only accesses the first 64 sprites
-unsigned char __fastcall__ oam_spr(unsigned char x, unsigned char y,
-					unsigned char chrnum, unsigned char attr,
-					unsigned char sprid);
+void __fastcall__ oam_spr(unsigned char x, unsigned char y,
+					unsigned char chrnum, unsigned char attr);
 
 // set sprite in OAM buffer, chrnum is tile, attr is attribute, sprid is offset in OAM in bytes
 // returns sprid+4, which is offset for a next sprite
 // only accesses the first 64 sprites
 // allows negative X
-unsigned char __fastcall__ oam_spr_x(int x, unsigned char y,
-					unsigned char chrnum, unsigned char attr,
-					unsigned char sprid);
+void __fastcall__ oam_spr_x(int x, unsigned char y,
+					unsigned char chrnum, unsigned char attr);
 
 // set metasprite in OAM buffer
 // meta sprite is a const unsigned char array, it contains four bytes per sprite
@@ -76,12 +74,12 @@ unsigned char __fastcall__ oam_spr_x(int x, unsigned char y,
 // x=128 is end of a meta sprite
 // returns sprid+4, which is offset for a next sprite
 // only accesses the first 64 sprites
-unsigned char __fastcall__ oam_meta_spr(unsigned char x, unsigned char y,
-					unsigned char sprid, const unsigned char *data);
+void __fastcall__ oam_meta_spr(unsigned char x, unsigned char y,
+					const unsigned char *data);
 
 // same but allows negative X
-unsigned char __fastcall__ oam_meta_spr_x(int x, unsigned char y,
-					unsigned char sprid, const unsigned char *data);
+void __fastcall__ oam_meta_spr_x(int x, unsigned char y,
+					const unsigned char *data);
 
 // hide all remaining sprites from given offset
 void __fastcall__ oam_hide_rest(unsigned char sprid);
diff --git a/snes/cc65-template/neslib.s b/snes/cc65-template/neslib.s
index eb5490b..635a969 100644
--- a/snes/cc65-template/neslib.s
+++ b/snes/cc65-template/neslib.s
@@ -2,7 +2,7 @@
 .smart
 
 	.import push0,popa,popax,_main,OAM_BUF
-	.importzp RAND_SEED
+	.importzp RAND_SEED, _oam_off
 	.exportzp PPU_MASK_VAR
 
 	.include "zeropage.inc"
@@ -403,16 +403,14 @@ _oam_big:
 
 	rts
 
-;unsigned char __fastcall__ oam_spr_x(int x,unsigned char y,unsigned char chrnum,unsigned char attr,unsigned char sprid);
+;void __fastcall__ oam_spr_x(int x,unsigned char y,unsigned char chrnum,unsigned char attr);
 
 _oam_spr_x:
 
-	tax
-
-	ldy #0		;five popa calls replacement
-	lda (sp),y
-	iny
+	ldx _oam_off
 	sta OAM_BUF+3,x
+
+	ldy #0		;four popa calls replacement
 	lda (sp),y
 	iny
 	sta OAM_BUF+2,x
@@ -449,29 +447,28 @@ _oam_spr_x:
 @posX:
 	lda <sp
 	clc
-	adc #5
+	adc #4
 	sta <sp
 	bcc @1
 	inc <sp+1
 
 @1:
+	inx
+	inx
+	inx
+	inx
+	stx _oam_off
 
-	txa
-	clc
-	adc #4
-	ldx #$00
 	rts
 
-;unsigned char __fastcall__ oam_spr(unsigned char x,unsigned char y,unsigned char chrnum,unsigned char attr,unsigned char sprid);
+;void __fastcall__ oam_spr(unsigned char x,unsigned char y,unsigned char chrnum,unsigned char attr);
 
 _oam_spr:
 
-	tax
-
-	ldy #0		;four popa calls replacement
-	lda (sp),y
-	iny
+	ldx _oam_off
 	sta OAM_BUF+3,x
+
+	ldy #0		;three popa calls replacement
 	lda (sp),y
 	iny
 	sta OAM_BUF+2,x
@@ -483,37 +480,36 @@ _oam_spr:
 
 	lda <sp
 	clc
-	adc #4
+	adc #3
 	sta <sp
 	bcc @1
 	inc <sp+1
 
 @1:
+	inx
+	inx
+	inx
+	inx
+	stx _oam_off
 
-	txa
-	clc
-	adc #4
-	ldx #$00
 	rts
 
 
 
-;unsigned char __fastcall__ oam_meta_spr(unsigned char x,unsigned char y,unsigned char sprid,const unsigned char *data);
+;void __fastcall__ oam_meta_spr(unsigned char x,unsigned char y,const unsigned char *data);
 
 _oam_meta_spr:
 
 	sta <PTR
 	stx <PTR+1
 
-	ldy #2		;three popa calls replacement, performed in reversed order
+	ldy #1		;two popa calls replacement, performed in reversed order
 	lda (sp),y
 	dey
 	sta <SCRX
 	lda (sp),y
-	dey
 	sta <SCRY
-	lda (sp),y
-	tax
+	ldx _oam_off
 
 @1:
 
@@ -544,26 +540,25 @@ _oam_meta_spr:
 @2:
 
 	lda <sp
-	adc #2			;carry is always set here, so it adds 3
+	adc #1			;carry is always set here, so it adds 2
 	sta <sp
 	bcc @3
 	inc <sp+1
 
 @3:
+	stx _oam_off
 
-	txa
-	ldx #$00
 	rts
 
 
-;unsigned char __fastcall__ oam_meta_spr_x(int x,unsigned char y,unsigned char sprid,const unsigned char *data);
+;void __fastcall__ oam_meta_spr_x(int x,unsigned char y,const unsigned char *data);
 
 _oam_meta_spr_x:
 
 	sta <PTR
 	stx <PTR+1
 
-	ldy #3		;four popa calls replacement, performed in reversed order
+	ldy #2		;three popa calls replacement, performed in reversed order
 	lda (sp),y
 	dey
 	sta <SRC+1
@@ -571,10 +566,8 @@ _oam_meta_spr_x:
 	dey
 	sta <SRC
 	lda (sp),y
-	dey
 	sta <SCRY
-	lda (sp),y
-	tax
+	ldx _oam_off
 
 @1:
 
@@ -654,15 +647,14 @@ _oam_meta_spr_x:
 @2:
 
 	lda <sp
-	adc #3			;carry is always set here, so it adds 4
+	adc #2			;carry is always set here, so it adds 3
 	sta <sp
 	bcc @3
 	inc <sp+1
 
 @3:
+	stx _oam_off
 
-	txa
-	ldx #$00
 	rts
 
 
